{"transformer-remark-markdown-ast-fcccc87c87f9cafb916bfab3943dc82f--":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Probably the most familiar experience of a hardware startup is the lack of monetary resources (free lunches? no way!). And yet, we still want to be cutting edge with our machine learning techniques. Sometimes, doing a custom feature extraction from our datasets can take a lot of computing resources, taking up to 8 hours on a laptop running Linux (notice how I did not say a Macbook Pro). Thankfully, Big Brother Google wants to trickle down some benefits for the needy, and provides us with a Free Tier for a lot of there cloud platform modules. So, I decided to try this out.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":579,"offset":579},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":579,"offset":579},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"First, I just wrote a simple Python program (testscript.py) that takes more than just a second to run, by doing the forbidden: nested for loops, the Avada Kedavra of programming.","position":{"start":{"line":4,"column":1,"offset":581},"end":{"line":4,"column":179,"offset":759},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":581},"end":{"line":4,"column":179,"offset":759},"indent":[]}},{"type":"code","lang":"python","value":"numruns = 300\nprint(\"running\")\nhuge_array = [[[0.0 for i in range(numruns)] for j in range(numruns)] for k in range(numruns)]\ncounter = 0\nprint(\"starting loops\")\nfor i in range(numruns):\n    for j in range(numruns):\n        for k in range(numruns):\n            huge_array[i][j][k] = i+j+k\n            counter+=1\n            if counter%10000 == 0:\n                print(counter)\nprint(\"finished\")","position":{"start":{"line":6,"column":1,"offset":761},"end":{"line":20,"column":4,"offset":1171},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first thing to do is to create a project on GCP (Google Cloud Platform) by going to console.cloud.google.com and clicking on \"Select a Project\". Once you have named your project, notice you can take advantage of $300 of free credits to play with (how generous!). Once you have made your project, you can click on \"Compute Engine\" on the left hand panel, and create an instance. As of the time this post was written, you can get a free f1-micro instance running on a virtual machine in the US. This f1-micro has 0.6GB of memory and 1vCPU.\n","position":{"start":{"line":22,"column":1,"offset":1173},"end":{"line":23,"column":1,"offset":1715},"indent":[1]}},{"type":"image","title":null,"url":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/gce-dashboard.jpg","alt":"gce-f1micro","position":{"start":{"line":23,"column":1,"offset":1715},"end":{"line":23,"column":103,"offset":1817},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1173},"end":{"line":23,"column":103,"offset":1817},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"After this instance is created, you can view your instance and also SSH into the instance. If you do this, then you can interact with this instance via a Debian Linux shell. To upload a file, you can click on the gearbox on the top right side to upload your python file. In my case, I am uploading a python 3 script called testscript.py, which I shared above. \n","position":{"start":{"line":25,"column":1,"offset":1819},"end":{"line":26,"column":1,"offset":2180},"indent":[1]}},{"type":"image","title":null,"url":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/f1micro-SSHshell.jpg","alt":"gce-f1microShell","position":{"start":{"line":26,"column":1,"offset":2180},"end":{"line":26,"column":111,"offset":2290},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1819},"end":{"line":26,"column":111,"offset":2290},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"After it is uploaded, you can run the file on the instance by first making it an executable with ","position":{"start":{"line":28,"column":1,"offset":2292},"end":{"line":28,"column":98,"offset":2389},"indent":[]}},{"type":"inlineCode","value":"chmod +x testscript.py","position":{"start":{"line":28,"column":98,"offset":2389},"end":{"line":28,"column":122,"offset":2413},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":28,"column":122,"offset":2413},"end":{"line":28,"column":124,"offset":2415},"indent":[]}},{"type":"inlineCode","value":"chmod","position":{"start":{"line":28,"column":124,"offset":2415},"end":{"line":28,"column":131,"offset":2422},"indent":[]}},{"type":"text","value":" basically changes the mode and using the ","position":{"start":{"line":28,"column":131,"offset":2422},"end":{"line":28,"column":173,"offset":2464},"indent":[]}},{"type":"inlineCode","value":"+x","position":{"start":{"line":28,"column":173,"offset":2464},"end":{"line":28,"column":177,"offset":2468},"indent":[]}},{"type":"text","value":" option makes it an executable. Then you can run ","position":{"start":{"line":28,"column":177,"offset":2468},"end":{"line":28,"column":226,"offset":2517},"indent":[]}},{"type":"inlineCode","value":"nohup","position":{"start":{"line":28,"column":226,"offset":2517},"end":{"line":28,"column":233,"offset":2524},"indent":[]}},{"type":"text","value":" on the python script to get it running in the shell without requiring the shell to be open. Unfortunately, with the python script I shared, it gets killed after a few seconds:\n","position":{"start":{"line":28,"column":233,"offset":2524},"end":{"line":29,"column":1,"offset":2701},"indent":[1]}},{"type":"image","title":null,"url":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/f1micro-killed.jpg","alt":"gce-f1microKilled","position":{"start":{"line":29,"column":1,"offset":2701},"end":{"line":29,"column":110,"offset":2810},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2292},"end":{"line":29,"column":110,"offset":2810},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Turns out free also means you can't just leave something running forever. If you check the nohup.out file using ","position":{"start":{"line":31,"column":1,"offset":2812},"end":{"line":31,"column":113,"offset":2924},"indent":[]}},{"type":"inlineCode","value":"cat nohup.out","position":{"start":{"line":31,"column":113,"offset":2924},"end":{"line":31,"column":128,"offset":2939},"indent":[]}},{"type":"text","value":", you can see that my script ended somewhere after iteration 523000. Probably exceeded the RAM available here. Probably the better thing to do is to take advantage of another free item, the 5GB of cloud storage. I'll try that next time.","position":{"start":{"line":31,"column":128,"offset":2939},"end":{"line":31,"column":364,"offset":3175},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":2812},"end":{"line":31,"column":364,"offset":3175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Useful references: ","position":{"start":{"line":33,"column":1,"offset":3177},"end":{"line":33,"column":20,"offset":3196},"indent":[]}},{"type":"link","title":null,"url":"https://cloud.google.com/free/docs/always-free-usage-limits","children":[{"type":"text","value":"https://cloud.google.com/free/docs/always-free-usage-limits","position":{"start":{"line":33,"column":20,"offset":3196},"end":{"line":33,"column":79,"offset":3255},"indent":[]}}],"position":{"start":{"line":33,"column":20,"offset":3196},"end":{"line":33,"column":79,"offset":3255},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":3177},"end":{"line":33,"column":79,"offset":3255},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":34,"column":1,"offset":3256}}},"transformer-remark-markdown-ast-e1a1ac9a4f71834373d7d2be84b0aca1--":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Since I work for an IIoT combined hardware/sofware company, we often receive packages through the mail. This includes anything from dev boards to etched plastic enclosures. Now that we receive packages so often, it is not very easy to keep track of when a package is supposed to be arriving, and we don't always get notifications when items get held up in customs or get lost in the process. Once again APIs are here to save the day.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":434,"offset":434},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":434,"offset":434},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the ideal scenario, we could create a Chrome extension with a trained machine learning algorithm that can detect whether a purchase has been made for a delivery, guess the delivery timeframe, store the delivery in a database, and automatically alert the user if today's date is later than the anticipated delivery date. However, even this scenario doesn't account for company purchases made with a purchase order system, which is why procurement teams exist.","position":{"start":{"line":4,"column":1,"offset":436},"end":{"line":4,"column":462,"offset":897},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":436},"end":{"line":4,"column":462,"offset":897},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Given that I am no genius, an idiot's backup to the system above is to use a slack slash command to automatically update a simple database, like a spreadsheet in Google Sheets for example. Then, using an incoming webhook, send an alert if it is past the delivery date for the package, triggered once every day to a channel, perhaps called #deliveryalerts. If there are no packages that are supposed to be delivered already, no alerts. ","position":{"start":{"line":6,"column":1,"offset":899},"end":{"line":6,"column":436,"offset":1334},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":899},"end":{"line":6,"column":436,"offset":1334},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can first create a simple spreadsheet database like this: \n","position":{"start":{"line":8,"column":1,"offset":1336},"end":{"line":9,"column":1,"offset":1398},"indent":[1]}},{"type":"image","title":null,"url":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/vendor_spreadsheet.jpg","alt":"vendor-spreadsheet","position":{"start":{"line":9,"column":1,"offset":1398},"end":{"line":9,"column":115,"offset":1512},"indent":[]}},{"type":"text","value":"\nThis would show the item that is being delivered, the estimated delivery date, and a boolean Yes/No as to whether the item has been received.","position":{"start":{"line":9,"column":115,"offset":1512},"end":{"line":10,"column":142,"offset":1654},"indent":[1]}}],"position":{"start":{"line":8,"column":1,"offset":1336},"end":{"line":10,"column":142,"offset":1654},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then, we can create the #deliveryalerts channel in Slack, and integrate a Slack incoming webhook that points to #deliveryalerts and a slash command. In this case, we create one called /delivery. /delivery will send a post request to some endpoint that you need to define (a url). In our case, we can just use Google Apps script to set up this endpoint. Anything written after the /delivery command will be sent to the endpoint, and we can create the script to parse this text message using regular expressions (regex). Google Apps Script will handle the request through a doPost() function that you must write. Just take the spreadsheet that you want to set as your deliveries database, and on the Tools menu select script editor. Copy the ","position":{"start":{"line":12,"column":1,"offset":1656},"end":{"line":12,"column":741,"offset":2396},"indent":[]}},{"type":"inlineCode","value":"doPost()","position":{"start":{"line":12,"column":741,"offset":2396},"end":{"line":12,"column":751,"offset":2406},"indent":[]}},{"type":"text","value":" example below into the Code.gs file.","position":{"start":{"line":12,"column":751,"offset":2406},"end":{"line":12,"column":788,"offset":2443},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1656},"end":{"line":12,"column":788,"offset":2443},"indent":[]}},{"type":"code","lang":"javascript","value":"// Handle the Post request, based upon the command that is written after the slash command\nfunction doPost(e){\n  var commandReceived = e.parameter[\"text\"];\n\n  if (commandReceived.match(/help/)) showHelp();\t\t\t// showHelp() is run when slack user types: /delivery help\n  if (commandReceived.match(/list/)) listDeliveries();\n  if (commandReceived.match(/add/)) add(e);\n  if (commandReceived.match(/remove/)) remove(e);\t\t\t// remove(e) is run after slack user types: /delivery remove someItem\n  if (commandReceived.match(/received/)) received(e);\n  \n  // Need to create a return, otherwise slack will complain that there was no response created\n  var returnMessage = \"send complete\";\n  return ContentService.createTextOutput(JSON.stringify({text:returnMessage})).setMimeType(ContentService.MimeType.JSON);\n}","position":{"start":{"line":14,"column":1,"offset":2445},"end":{"line":29,"column":4,"offset":3265},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Slack complains if there is no return message, so I've also included just a simple \"send complete\" at the end of the ","position":{"start":{"line":31,"column":1,"offset":3267},"end":{"line":31,"column":118,"offset":3384},"indent":[]}},{"type":"inlineCode","value":"doPost()","position":{"start":{"line":31,"column":118,"offset":3384},"end":{"line":31,"column":128,"offset":3394},"indent":[]}},{"type":"text","value":" function. Now, all you need to do is create the functions to handle each of the if statements in ","position":{"start":{"line":31,"column":128,"offset":3394},"end":{"line":31,"column":226,"offset":3492},"indent":[]}},{"type":"inlineCode","value":"doPost()","position":{"start":{"line":31,"column":226,"offset":3492},"end":{"line":31,"column":236,"offset":3502},"indent":[]}},{"type":"text","value":". An example of this function can be seen here, for marking a delivery as received. Notice that regular expressions are used to determine the format for the string that is attached to the slash command.","position":{"start":{"line":31,"column":236,"offset":3502},"end":{"line":31,"column":438,"offset":3704},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":3267},"end":{"line":31,"column":438,"offset":3704},"indent":[]}},{"type":"code","lang":"javascript","value":"function received(e){\n  var receiver = e.parameter[\"user_name\"];\n  var messageReceived = e.parameter[\"text\"].trim();\n  var regex = /received ([a-zA-Z0-9-_\\s]+)/;\n  var matches = regex.exec(messageReceived);\n  var deliveryName = matches[1];\n  var sheet = getStatusSheet();\n  var affectedRow = getDeliveryRow(deliveryName);\n  \n  if (affectedRow) {\n    sheet.getRange(\"D\" + (affectedRow)).setValue('Y');\n    getLogger().log(\"%s received delivery %s\", receiver, deliveryName);\n    listDeliveries();\n  } else {\n    sendMessage(\"*\" + deliveryName + \"* delivery not found\");\n  }\n}","position":{"start":{"line":33,"column":1,"offset":3706},"end":{"line":51,"column":4,"offset":4298},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Then there's the timed triggers. To do this, I used a trigger function, which runs another function I made, querySpreadsheet, once every day. I also created a button on a html page to turn on/off this trigger.","position":{"start":{"line":53,"column":1,"offset":4300},"end":{"line":53,"column":210,"offset":4509},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":4300},"end":{"line":53,"column":210,"offset":4509},"indent":[]}},{"type":"code","lang":"javascript","value":"function createTrigger() {\n  ScriptApp.newTrigger('querySpreadsheet')\n  .timeBased()\n  .everyDays(1)\n  .create()\n}","position":{"start":{"line":54,"column":1,"offset":4510},"end":{"line":61,"column":4,"offset":4643},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Another note, I used BetterLog to create another spreadsheet tab that keeps track of the different actions users take with the app. This helps us know who received what package in case we need to track one down. You'll have to add the BetterLog library to your project.","position":{"start":{"line":63,"column":1,"offset":4645},"end":{"line":63,"column":270,"offset":4914},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":4645},"end":{"line":63,"column":270,"offset":4914},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To set everything up on the Slack end, login to ","position":{"start":{"line":65,"column":1,"offset":4916},"end":{"line":65,"column":49,"offset":4964},"indent":[]}},{"type":"html","value":"<a href=\"https://api.slack.com/apps\">","position":{"start":{"line":65,"column":49,"offset":4964},"end":{"line":65,"column":86,"offset":5001},"indent":[]}},{"type":"text","value":"api.slack.com/apps","position":{"start":{"line":65,"column":86,"offset":5001},"end":{"line":65,"column":104,"offset":5019},"indent":[]}},{"type":"html","value":"</a>","position":{"start":{"line":65,"column":104,"offset":5019},"end":{"line":65,"column":108,"offset":5023},"indent":[]}},{"type":"text","value":", create a new app, and Add features and functionality, adding Incoming Webhooks, Interactive Components, and Slash Commands. You will need to copy the incoming webhooks link into the Google Apps Script. ","position":{"start":{"line":65,"column":108,"offset":5023},"end":{"line":65,"column":312,"offset":5227},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":4916},"end":{"line":65,"column":312,"offset":5227},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The full script is located in this github repository: ","position":{"start":{"line":67,"column":1,"offset":5229},"end":{"line":67,"column":55,"offset":5283},"indent":[]}},{"type":"html","value":"<a href=\"https://github.com/simjxu/google_apps_scripts/tree/master/Slack-Delivery-Tracking\">","position":{"start":{"line":67,"column":55,"offset":5283},"end":{"line":67,"column":147,"offset":5375},"indent":[]}},{"type":"text","value":"Slack Delivery Tracking","position":{"start":{"line":67,"column":147,"offset":5375},"end":{"line":67,"column":170,"offset":5398},"indent":[]}},{"type":"html","value":"</a>","position":{"start":{"line":67,"column":170,"offset":5398},"end":{"line":67,"column":174,"offset":5402},"indent":[]}},{"type":"text","value":"  Be sure to change out the spreadsheet id to match the spreadsheet id of your Google sheets document (the long string in your Google Sheet URL), and change the incoming webhook link to the webhook link that you receive when you enable that feature on your slack apps. You might want to test by changing the ","position":{"start":{"line":67,"column":174,"offset":5402},"end":{"line":67,"column":482,"offset":5710},"indent":[]}},{"type":"inlineCode","value":"createTrigger()","position":{"start":{"line":67,"column":482,"offset":5710},"end":{"line":67,"column":499,"offset":5727},"indent":[]}},{"type":"text","value":" function to be ","position":{"start":{"line":67,"column":499,"offset":5727},"end":{"line":67,"column":515,"offset":5743},"indent":[]}},{"type":"inlineCode","value":".everyMinutes(1)","position":{"start":{"line":67,"column":515,"offset":5743},"end":{"line":67,"column":533,"offset":5761},"indent":[]}},{"type":"text","value":" instead of ","position":{"start":{"line":67,"column":533,"offset":5761},"end":{"line":67,"column":545,"offset":5773},"indent":[]}},{"type":"inlineCode","value":".everyDays(1)","position":{"start":{"line":67,"column":545,"offset":5773},"end":{"line":67,"column":560,"offset":5788},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":67,"column":560,"offset":5788},"end":{"line":67,"column":561,"offset":5789},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":5229},"end":{"line":67,"column":561,"offset":5789},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To Do: to reduce time that it takes to read through the excel sheet, it's best to add within the trigger function something that places the received packages into some sort of archive spreadsheet tab. But alas, I already took too long to create this post. I can't take this long if I want to see rows of green squares on my github.","position":{"start":{"line":69,"column":1,"offset":5791},"end":{"line":69,"column":332,"offset":6122},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":5791},"end":{"line":69,"column":332,"offset":6122},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Useful references: ","position":{"start":{"line":71,"column":1,"offset":6124},"end":{"line":71,"column":20,"offset":6143},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/@hopsor/building-a-slack-serverless-bot-with-google-apps-script-and-spreadsheets-35bdac755a44","children":[{"type":"text","value":"https://medium.com/@hopsor/building-a-slack-serverless-bot-with-google-apps-script-and-spreadsheets-35bdac755a44","position":{"start":{"line":71,"column":20,"offset":6143},"end":{"line":71,"column":132,"offset":6255},"indent":[]}}],"position":{"start":{"line":71,"column":20,"offset":6143},"end":{"line":71,"column":132,"offset":6255},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":6124},"end":{"line":71,"column":132,"offset":6255},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":1,"offset":6256}}},"transformer-remark-markdown-ast-328e97a21ece4330c020cac4b15964b0--":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The company I work for makes internet connected hardware for collecting machine data. So yes, this involves actually building a physical product that has to be constructed from solder, glue, and rhino tears. Because of this, we have to also build a software application that is able to test functionality of the device: a manufacturing webapp that runs on the cloud, collects functional test data, and stores serial numbers/calibration values on a Postgres database. Since this web application is not customer facing, it gets all the care, love, and attention of a donation request letter in your snail mail. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":610,"offset":610},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":610,"offset":610},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At the time this was built, the developers had experience developing in Python, and they chose to develop the frontend in Angular using Flask. Why they chose Flask over Django eludes me, but upon doing some research it seems like Flask has more of a minimalist/bare bones, add-functionality-as-you-need-it type of approach, while Django comes with the bells and whistles included. ","position":{"start":{"line":4,"column":1,"offset":612},"end":{"line":4,"column":382,"offset":993},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":612},"end":{"line":4,"column":382,"offset":993},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here's everything I know about building this web application at the moment. There exists an index.html file in the app directory, and within that index.html file there are script src files which point to other angular source files which have too many lines of code for me to understand at the moment.","position":{"start":{"line":6,"column":1,"offset":995},"end":{"line":6,"column":301,"offset":1295},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":995},"end":{"line":6,"column":301,"offset":1295},"indent":[]}},{"type":"code","lang":"html","value":"<script src=\"bower_components/jquery/dist/jquery.js\"></script>\n<script src=\"bower_components/angular/angular.js\"></script>\n<script src=\"bower_components/bootstrap/dist/js/bootstrap.js\"></script>","position":{"start":{"line":8,"column":1,"offset":1297},"end":{"line":12,"column":4,"offset":1504},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Since I have no real understanding of the architecture of the existing Angular/Flask web application right now, I'll go ahead and start from scratch, building the web application with React/NodeJS instead.","position":{"start":{"line":14,"column":1,"offset":1506},"end":{"line":14,"column":206,"offset":1711},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1506},"end":{"line":14,"column":206,"offset":1711},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"1st step in getting familiar with React is to change this jekyll blog into a Gatsby blog: \n","position":{"start":{"line":16,"column":1,"offset":1713},"end":{"line":17,"column":1,"offset":1804},"indent":[1]}},{"type":"html","value":"<a href=\"https://www.gatsbyjs.org/docs/deploy-gatsby/#github-pages\">","position":{"start":{"line":17,"column":1,"offset":1804},"end":{"line":17,"column":69,"offset":1872},"indent":[]}},{"type":"text","value":"https://www.gatsbyjs.org/docs/deploy-gatsby/#github-pages","position":{"start":{"line":17,"column":69,"offset":1872},"end":{"line":17,"column":126,"offset":1929},"indent":[]}},{"type":"html","value":"</a>","position":{"start":{"line":17,"column":126,"offset":1929},"end":{"line":17,"column":130,"offset":1933},"indent":[]}},{"type":"text","value":"\nThis static website generator uses React, Webpack, and GraphQL, all the popular kids at the pool right now. For those of you who are new to engineering: the most critical skill as an engineer is to be able to read other people's documentation.","position":{"start":{"line":17,"column":130,"offset":1933},"end":{"line":18,"column":244,"offset":2177},"indent":[1]}}],"position":{"start":{"line":16,"column":1,"offset":1713},"end":{"line":18,"column":244,"offset":2177},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":18,"column":244,"offset":2177}}},"transformer-remark-markdown-ast-d8d6666a5f9828e7105c89be35f82bf6--":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"It's good to start expectations low for the first post. Commitment is hard, and you never know if a blog will actually continue far past the first few posts. Anyway, this blog is intended to record me as I self-teach web development. Follow along if you're on the same page. Luckily, I'm not really starting from scratch, at this point I've been working for 8 years. 3 of those years I've spent working in IoT. I've developed tools in MATLAB, Python, LabVIEW, Squirrel/C, and also done a tiny bit of node development, mostly to create an endpoint for my Electric Imp module post requests. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":590,"offset":590},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":590,"offset":590},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I used to focus primarily on hardware work, and my old blog talked nearly exclusively about digital signal processing (","position":{"start":{"line":4,"column":1,"offset":592},"end":{"line":4,"column":120,"offset":711},"indent":[]}},{"type":"link","title":null,"url":"https://simonxu.wordpress.com/","children":[{"type":"text","value":"https://simonxu.wordpress.com/","position":{"start":{"line":4,"column":120,"offset":711},"end":{"line":4,"column":150,"offset":741},"indent":[]}}],"position":{"start":{"line":4,"column":120,"offset":711},"end":{"line":4,"column":150,"offset":741},"indent":[]}},{"type":"text","value":"). I was also a lot less funny then. Now this will be my new blog. I'm using github pages with jekyll and I'm using a template someone else came up with (credit is on the bottom of the page).","position":{"start":{"line":4,"column":150,"offset":741},"end":{"line":4,"column":341,"offset":932},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":592},"end":{"line":4,"column":341,"offset":932},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Recently, I decided that hardware is too hard, and thus begins my switch. No guarantees. I'm going rock climbing.","position":{"start":{"line":6,"column":1,"offset":934},"end":{"line":6,"column":114,"offset":1047},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":934},"end":{"line":6,"column":114,"offset":1047},"indent":[]}},{"type":"code","lang":"js","value":"var blog = require('persistence');","position":{"start":{"line":8,"column":1,"offset":1049},"end":{"line":10,"column":4,"offset":1094},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":11,"column":1,"offset":1095}}},"transformer-remark-markdown-html-ast-d8d6666a5f9828e7105c89be35f82bf6--":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's good to start expectations low for the first post. Commitment is hard, and you never know if a blog will actually continue far past the first few posts. Anyway, this blog is intended to record me as I self-teach web development. Follow along if you're on the same page. Luckily, I'm not really starting from scratch, at this point I've been working for 8 years. 3 of those years I've spent working in IoT. I've developed tools in MATLAB, Python, LabVIEW, Squirrel/C, and also done a tiny bit of node development, mostly to create an endpoint for my Electric Imp module post requests. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":590,"offset":590}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":590,"offset":590}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I used to focus primarily on hardware work, and my old blog talked nearly exclusively about digital signal processing (","position":{"start":{"line":4,"column":1,"offset":592},"end":{"line":4,"column":120,"offset":711}}},{"type":"element","tagName":"a","properties":{"href":"https://simonxu.wordpress.com/"},"children":[{"type":"text","value":"https://simonxu.wordpress.com/","position":{"start":{"line":4,"column":120,"offset":711},"end":{"line":4,"column":150,"offset":741}}}],"position":{"start":{"line":4,"column":120,"offset":711},"end":{"line":4,"column":150,"offset":741}}},{"type":"text","value":"). I was also a lot less funny then. Now this will be my new blog. I'm using github pages with jekyll and I'm using a template someone else came up with (credit is on the bottom of the page).","position":{"start":{"line":4,"column":150,"offset":741},"end":{"line":4,"column":341,"offset":932}}}],"position":{"start":{"line":4,"column":1,"offset":592},"end":{"line":4,"column":341,"offset":932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recently, I decided that hardware is too hard, and thus begins my switch. No guarantees. I'm going rock climbing.","position":{"start":{"line":6,"column":1,"offset":934},"end":{"line":6,"column":114,"offset":1047}}}],"position":{"start":{"line":6,"column":1,"offset":934},"end":{"line":6,"column":114,"offset":1047}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"var blog = require('persistence');\n"}],"position":{"start":{"line":8,"column":1,"offset":1049},"end":{"line":10,"column":4,"offset":1094}}}],"position":{"start":{"line":8,"column":1,"offset":1049},"end":{"line":10,"column":4,"offset":1094}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":11,"column":1,"offset":1095}}},"transformer-remark-markdown-html-d8d6666a5f9828e7105c89be35f82bf6--":"<p>It's good to start expectations low for the first post. Commitment is hard, and you never know if a blog will actually continue far past the first few posts. Anyway, this blog is intended to record me as I self-teach web development. Follow along if you're on the same page. Luckily, I'm not really starting from scratch, at this point I've been working for 8 years. 3 of those years I've spent working in IoT. I've developed tools in MATLAB, Python, LabVIEW, Squirrel/C, and also done a tiny bit of node development, mostly to create an endpoint for my Electric Imp module post requests. </p>\n<p>I used to focus primarily on hardware work, and my old blog talked nearly exclusively about digital signal processing (<a href=\"https://simonxu.wordpress.com/\">https://simonxu.wordpress.com/</a>). I was also a lot less funny then. Now this will be my new blog. I'm using github pages with jekyll and I'm using a template someone else came up with (credit is on the bottom of the page).</p>\n<p>Recently, I decided that hardware is too hard, and thus begins my switch. No guarantees. I'm going rock climbing.</p>\n<pre><code class=\"language-js\">var blog = require('persistence');\n</code></pre>","transformer-remark-markdown-html-ast-fcccc87c87f9cafb916bfab3943dc82f--":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Probably the most familiar experience of a hardware startup is the lack of monetary resources (free lunches? no way!). And yet, we still want to be cutting edge with our machine learning techniques. Sometimes, doing a custom feature extraction from our datasets can take a lot of computing resources, taking up to 8 hours on a laptop running Linux (notice how I did not say a Macbook Pro). Thankfully, Big Brother Google wants to trickle down some benefits for the needy, and provides us with a Free Tier for a lot of there cloud platform modules. So, I decided to try this out.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":579,"offset":579}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":579,"offset":579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, I just wrote a simple Python program (testscript.py) that takes more than just a second to run, by doing the forbidden: nested for loops, the Avada Kedavra of programming.","position":{"start":{"line":4,"column":1,"offset":581},"end":{"line":4,"column":179,"offset":759}}}],"position":{"start":{"line":4,"column":1,"offset":581},"end":{"line":4,"column":179,"offset":759}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"numruns = 300\nprint(\"running\")\nhuge_array = [[[0.0 for i in range(numruns)] for j in range(numruns)] for k in range(numruns)]\ncounter = 0\nprint(\"starting loops\")\nfor i in range(numruns):\n    for j in range(numruns):\n        for k in range(numruns):\n            huge_array[i][j][k] = i+j+k\n            counter+=1\n            if counter%10000 == 0:\n                print(counter)\nprint(\"finished\")\n"}],"position":{"start":{"line":6,"column":1,"offset":761},"end":{"line":20,"column":4,"offset":1171}}}],"position":{"start":{"line":6,"column":1,"offset":761},"end":{"line":20,"column":4,"offset":1171}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first thing to do is to create a project on GCP (Google Cloud Platform) by going to console.cloud.google.com and clicking on \"Select a Project\". Once you have named your project, notice you can take advantage of $300 of free credits to play with (how generous!). Once you have made your project, you can click on \"Compute Engine\" on the left hand panel, and create an instance. As of the time this post was written, you can get a free f1-micro instance running on a virtual machine in the US. This f1-micro has 0.6GB of memory and 1vCPU.\n","position":{"start":{"line":22,"column":1,"offset":1173},"end":{"line":23,"column":1,"offset":1715}}},{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/gce-dashboard.jpg","alt":"gce-f1micro"},"children":[],"position":{"start":{"line":23,"column":1,"offset":1715},"end":{"line":23,"column":103,"offset":1817}}}],"position":{"start":{"line":22,"column":1,"offset":1173},"end":{"line":23,"column":103,"offset":1817}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After this instance is created, you can view your instance and also SSH into the instance. If you do this, then you can interact with this instance via a Debian Linux shell. To upload a file, you can click on the gearbox on the top right side to upload your python file. In my case, I am uploading a python 3 script called testscript.py, which I shared above.\n","position":{"start":{"line":25,"column":1,"offset":1819},"end":{"line":26,"column":1,"offset":2180}}},{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/f1micro-SSHshell.jpg","alt":"gce-f1microShell"},"children":[],"position":{"start":{"line":26,"column":1,"offset":2180},"end":{"line":26,"column":111,"offset":2290}}}],"position":{"start":{"line":25,"column":1,"offset":1819},"end":{"line":26,"column":111,"offset":2290}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After it is uploaded, you can run the file on the instance by first making it an executable with ","position":{"start":{"line":28,"column":1,"offset":2292},"end":{"line":28,"column":98,"offset":2389}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"chmod +x testscript.py"}],"position":{"start":{"line":28,"column":98,"offset":2389},"end":{"line":28,"column":122,"offset":2413}}},{"type":"text","value":". ","position":{"start":{"line":28,"column":122,"offset":2413},"end":{"line":28,"column":124,"offset":2415}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"chmod"}],"position":{"start":{"line":28,"column":124,"offset":2415},"end":{"line":28,"column":131,"offset":2422}}},{"type":"text","value":" basically changes the mode and using the ","position":{"start":{"line":28,"column":131,"offset":2422},"end":{"line":28,"column":173,"offset":2464}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"+x"}],"position":{"start":{"line":28,"column":173,"offset":2464},"end":{"line":28,"column":177,"offset":2468}}},{"type":"text","value":" option makes it an executable. Then you can run ","position":{"start":{"line":28,"column":177,"offset":2468},"end":{"line":28,"column":226,"offset":2517}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nohup"}],"position":{"start":{"line":28,"column":226,"offset":2517},"end":{"line":28,"column":233,"offset":2524}}},{"type":"text","value":" on the python script to get it running in the shell without requiring the shell to be open. Unfortunately, with the python script I shared, it gets killed after a few seconds:\n","position":{"start":{"line":28,"column":233,"offset":2524},"end":{"line":29,"column":1,"offset":2701}}},{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/f1micro-killed.jpg","alt":"gce-f1microKilled"},"children":[],"position":{"start":{"line":29,"column":1,"offset":2701},"end":{"line":29,"column":110,"offset":2810}}}],"position":{"start":{"line":28,"column":1,"offset":2292},"end":{"line":29,"column":110,"offset":2810}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Turns out free also means you can't just leave something running forever. If you check the nohup.out file using ","position":{"start":{"line":31,"column":1,"offset":2812},"end":{"line":31,"column":113,"offset":2924}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cat nohup.out"}],"position":{"start":{"line":31,"column":113,"offset":2924},"end":{"line":31,"column":128,"offset":2939}}},{"type":"text","value":", you can see that my script ended somewhere after iteration 523000. Probably exceeded the RAM available here. Probably the better thing to do is to take advantage of another free item, the 5GB of cloud storage. I'll try that next time.","position":{"start":{"line":31,"column":128,"offset":2939},"end":{"line":31,"column":364,"offset":3175}}}],"position":{"start":{"line":31,"column":1,"offset":2812},"end":{"line":31,"column":364,"offset":3175}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Useful references: ","position":{"start":{"line":33,"column":1,"offset":3177},"end":{"line":33,"column":20,"offset":3196}}},{"type":"element","tagName":"a","properties":{"href":"https://cloud.google.com/free/docs/always-free-usage-limits"},"children":[{"type":"text","value":"https://cloud.google.com/free/docs/always-free-usage-limits","position":{"start":{"line":33,"column":20,"offset":3196},"end":{"line":33,"column":79,"offset":3255}}}],"position":{"start":{"line":33,"column":20,"offset":3196},"end":{"line":33,"column":79,"offset":3255}}}],"position":{"start":{"line":33,"column":1,"offset":3177},"end":{"line":33,"column":79,"offset":3255}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":34,"column":1,"offset":3256}}},"transformer-remark-markdown-html-fcccc87c87f9cafb916bfab3943dc82f--":"<p>Probably the most familiar experience of a hardware startup is the lack of monetary resources (free lunches? no way!). And yet, we still want to be cutting edge with our machine learning techniques. Sometimes, doing a custom feature extraction from our datasets can take a lot of computing resources, taking up to 8 hours on a laptop running Linux (notice how I did not say a Macbook Pro). Thankfully, Big Brother Google wants to trickle down some benefits for the needy, and provides us with a Free Tier for a lot of there cloud platform modules. So, I decided to try this out.</p>\n<p>First, I just wrote a simple Python program (testscript.py) that takes more than just a second to run, by doing the forbidden: nested for loops, the Avada Kedavra of programming.</p>\n<pre><code class=\"language-python\">numruns = 300\nprint(\"running\")\nhuge_array = [[[0.0 for i in range(numruns)] for j in range(numruns)] for k in range(numruns)]\ncounter = 0\nprint(\"starting loops\")\nfor i in range(numruns):\n    for j in range(numruns):\n        for k in range(numruns):\n            huge_array[i][j][k] = i+j+k\n            counter+=1\n            if counter%10000 == 0:\n                print(counter)\nprint(\"finished\")\n</code></pre>\n<p>The first thing to do is to create a project on GCP (Google Cloud Platform) by going to console.cloud.google.com and clicking on \"Select a Project\". Once you have named your project, notice you can take advantage of $300 of free credits to play with (how generous!). Once you have made your project, you can click on \"Compute Engine\" on the left hand panel, and create an instance. As of the time this post was written, you can get a free f1-micro instance running on a virtual machine in the US. This f1-micro has 0.6GB of memory and 1vCPU.\n<img src=\"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/gce-dashboard.jpg\" alt=\"gce-f1micro\"></p>\n<p>After this instance is created, you can view your instance and also SSH into the instance. If you do this, then you can interact with this instance via a Debian Linux shell. To upload a file, you can click on the gearbox on the top right side to upload your python file. In my case, I am uploading a python 3 script called testscript.py, which I shared above.\n<img src=\"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/f1micro-SSHshell.jpg\" alt=\"gce-f1microShell\"></p>\n<p>After it is uploaded, you can run the file on the instance by first making it an executable with <code>chmod +x testscript.py</code>. <code>chmod</code> basically changes the mode and using the <code>+x</code> option makes it an executable. Then you can run <code>nohup</code> on the python script to get it running in the shell without requiring the shell to be open. Unfortunately, with the python script I shared, it gets killed after a few seconds:\n<img src=\"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/f1micro-killed.jpg\" alt=\"gce-f1microKilled\"></p>\n<p>Turns out free also means you can't just leave something running forever. If you check the nohup.out file using <code>cat nohup.out</code>, you can see that my script ended somewhere after iteration 523000. Probably exceeded the RAM available here. Probably the better thing to do is to take advantage of another free item, the 5GB of cloud storage. I'll try that next time.</p>\n<p>Useful references: <a href=\"https://cloud.google.com/free/docs/always-free-usage-limits\">https://cloud.google.com/free/docs/always-free-usage-limits</a></p>","transformer-remark-markdown-html-ast-328e97a21ece4330c020cac4b15964b0--":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The company I work for makes internet connected hardware for collecting machine data. So yes, this involves actually building a physical product that has to be constructed from solder, glue, and rhino tears. Because of this, we have to also build a software application that is able to test functionality of the device: a manufacturing webapp that runs on the cloud, collects functional test data, and stores serial numbers/calibration values on a Postgres database. Since this web application is not customer facing, it gets all the care, love, and attention of a donation request letter in your snail mail. ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":610,"offset":610}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":610,"offset":610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At the time this was built, the developers had experience developing in Python, and they chose to develop the frontend in Angular using Flask. Why they chose Flask over Django eludes me, but upon doing some research it seems like Flask has more of a minimalist/bare bones, add-functionality-as-you-need-it type of approach, while Django comes with the bells and whistles included. ","position":{"start":{"line":4,"column":1,"offset":612},"end":{"line":4,"column":382,"offset":993}}}],"position":{"start":{"line":4,"column":1,"offset":612},"end":{"line":4,"column":382,"offset":993}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's everything I know about building this web application at the moment. There exists an index.html file in the app directory, and within that index.html file there are script src files which point to other angular source files which have too many lines of code for me to understand at the moment.","position":{"start":{"line":6,"column":1,"offset":995},"end":{"line":6,"column":301,"offset":1295}}}],"position":{"start":{"line":6,"column":1,"offset":995},"end":{"line":6,"column":301,"offset":1295}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-html"]},"children":[{"type":"text","value":"<script src=\"bower_components/jquery/dist/jquery.js\"></script>\n<script src=\"bower_components/angular/angular.js\"></script>\n<script src=\"bower_components/bootstrap/dist/js/bootstrap.js\"></script>\n"}],"position":{"start":{"line":8,"column":1,"offset":1297},"end":{"line":12,"column":4,"offset":1504}}}],"position":{"start":{"line":8,"column":1,"offset":1297},"end":{"line":12,"column":4,"offset":1504}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since I have no real understanding of the architecture of the existing Angular/Flask web application right now, I'll go ahead and start from scratch, building the web application with React/NodeJS instead.","position":{"start":{"line":14,"column":1,"offset":1506},"end":{"line":14,"column":206,"offset":1711}}}],"position":{"start":{"line":14,"column":1,"offset":1506},"end":{"line":14,"column":206,"offset":1711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"1st step in getting familiar with React is to change this jekyll blog into a Gatsby blog:\n","position":{"start":{"line":16,"column":1,"offset":1713},"end":{"line":17,"column":1,"offset":1804}}},{"type":"raw","value":"<a href=\"https://www.gatsbyjs.org/docs/deploy-gatsby/#github-pages\">","position":{"start":{"line":17,"column":1,"offset":1804},"end":{"line":17,"column":69,"offset":1872}}},{"type":"text","value":"https://www.gatsbyjs.org/docs/deploy-gatsby/#github-pages","position":{"start":{"line":17,"column":69,"offset":1872},"end":{"line":17,"column":126,"offset":1929}}},{"type":"raw","value":"</a>","position":{"start":{"line":17,"column":126,"offset":1929},"end":{"line":17,"column":130,"offset":1933}}},{"type":"text","value":"\nThis static website generator uses React, Webpack, and GraphQL, all the popular kids at the pool right now. For those of you who are new to engineering: the most critical skill as an engineer is to be able to read other people's documentation.","position":{"start":{"line":17,"column":130,"offset":1933},"end":{"line":18,"column":244,"offset":2177}}}],"position":{"start":{"line":16,"column":1,"offset":1713},"end":{"line":18,"column":244,"offset":2177}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":18,"column":244,"offset":2177}}},"transformer-remark-markdown-html-328e97a21ece4330c020cac4b15964b0--":"<p>The company I work for makes internet connected hardware for collecting machine data. So yes, this involves actually building a physical product that has to be constructed from solder, glue, and rhino tears. Because of this, we have to also build a software application that is able to test functionality of the device: a manufacturing webapp that runs on the cloud, collects functional test data, and stores serial numbers/calibration values on a Postgres database. Since this web application is not customer facing, it gets all the care, love, and attention of a donation request letter in your snail mail. </p>\n<p>At the time this was built, the developers had experience developing in Python, and they chose to develop the frontend in Angular using Flask. Why they chose Flask over Django eludes me, but upon doing some research it seems like Flask has more of a minimalist/bare bones, add-functionality-as-you-need-it type of approach, while Django comes with the bells and whistles included. </p>\n<p>Here's everything I know about building this web application at the moment. There exists an index.html file in the app directory, and within that index.html file there are script src files which point to other angular source files which have too many lines of code for me to understand at the moment.</p>\n<pre><code class=\"language-html\">&#x3C;script src=\"bower_components/jquery/dist/jquery.js\">&#x3C;/script>\n&#x3C;script src=\"bower_components/angular/angular.js\">&#x3C;/script>\n&#x3C;script src=\"bower_components/bootstrap/dist/js/bootstrap.js\">&#x3C;/script>\n</code></pre>\n<p>Since I have no real understanding of the architecture of the existing Angular/Flask web application right now, I'll go ahead and start from scratch, building the web application with React/NodeJS instead.</p>\n<p>1st step in getting familiar with React is to change this jekyll blog into a Gatsby blog:\n<a href=\"https://www.gatsbyjs.org/docs/deploy-gatsby/#github-pages\">https://www.gatsbyjs.org/docs/deploy-gatsby/#github-pages</a>\nThis static website generator uses React, Webpack, and GraphQL, all the popular kids at the pool right now. For those of you who are new to engineering: the most critical skill as an engineer is to be able to read other people's documentation.</p>","transformer-remark-markdown-html-ast-e1a1ac9a4f71834373d7d2be84b0aca1--":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since I work for an IIoT combined hardware/sofware company, we often receive packages through the mail. This includes anything from dev boards to etched plastic enclosures. Now that we receive packages so often, it is not very easy to keep track of when a package is supposed to be arriving, and we don't always get notifications when items get held up in customs or get lost in the process. Once again APIs are here to save the day.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":434,"offset":434}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":434,"offset":434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the ideal scenario, we could create a Chrome extension with a trained machine learning algorithm that can detect whether a purchase has been made for a delivery, guess the delivery timeframe, store the delivery in a database, and automatically alert the user if today's date is later than the anticipated delivery date. However, even this scenario doesn't account for company purchases made with a purchase order system, which is why procurement teams exist.","position":{"start":{"line":4,"column":1,"offset":436},"end":{"line":4,"column":462,"offset":897}}}],"position":{"start":{"line":4,"column":1,"offset":436},"end":{"line":4,"column":462,"offset":897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given that I am no genius, an idiot's backup to the system above is to use a slack slash command to automatically update a simple database, like a spreadsheet in Google Sheets for example. Then, using an incoming webhook, send an alert if it is past the delivery date for the package, triggered once every day to a channel, perhaps called #deliveryalerts. If there are no packages that are supposed to be delivered already, no alerts. ","position":{"start":{"line":6,"column":1,"offset":899},"end":{"line":6,"column":436,"offset":1334}}}],"position":{"start":{"line":6,"column":1,"offset":899},"end":{"line":6,"column":436,"offset":1334}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can first create a simple spreadsheet database like this:\n","position":{"start":{"line":8,"column":1,"offset":1336},"end":{"line":9,"column":1,"offset":1398}}},{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/vendor_spreadsheet.jpg","alt":"vendor-spreadsheet"},"children":[],"position":{"start":{"line":9,"column":1,"offset":1398},"end":{"line":9,"column":115,"offset":1512}}},{"type":"text","value":"\nThis would show the item that is being delivered, the estimated delivery date, and a boolean Yes/No as to whether the item has been received.","position":{"start":{"line":9,"column":115,"offset":1512},"end":{"line":10,"column":142,"offset":1654}}}],"position":{"start":{"line":8,"column":1,"offset":1336},"end":{"line":10,"column":142,"offset":1654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then, we can create the #deliveryalerts channel in Slack, and integrate a Slack incoming webhook that points to #deliveryalerts and a slash command. In this case, we create one called /delivery. /delivery will send a post request to some endpoint that you need to define (a url). In our case, we can just use Google Apps script to set up this endpoint. Anything written after the /delivery command will be sent to the endpoint, and we can create the script to parse this text message using regular expressions (regex). Google Apps Script will handle the request through a doPost() function that you must write. Just take the spreadsheet that you want to set as your deliveries database, and on the Tools menu select script editor. Copy the ","position":{"start":{"line":12,"column":1,"offset":1656},"end":{"line":12,"column":741,"offset":2396}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"doPost()"}],"position":{"start":{"line":12,"column":741,"offset":2396},"end":{"line":12,"column":751,"offset":2406}}},{"type":"text","value":" example below into the Code.gs file.","position":{"start":{"line":12,"column":751,"offset":2406},"end":{"line":12,"column":788,"offset":2443}}}],"position":{"start":{"line":12,"column":1,"offset":1656},"end":{"line":12,"column":788,"offset":2443}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// Handle the Post request, based upon the command that is written after the slash command\nfunction doPost(e){\n  var commandReceived = e.parameter[\"text\"];\n\n  if (commandReceived.match(/help/)) showHelp();            // showHelp() is run when slack user types: /delivery help\n  if (commandReceived.match(/list/)) listDeliveries();\n  if (commandReceived.match(/add/)) add(e);\n  if (commandReceived.match(/remove/)) remove(e);           // remove(e) is run after slack user types: /delivery remove someItem\n  if (commandReceived.match(/received/)) received(e);\n  \n  // Need to create a return, otherwise slack will complain that there was no response created\n  var returnMessage = \"send complete\";\n  return ContentService.createTextOutput(JSON.stringify({text:returnMessage})).setMimeType(ContentService.MimeType.JSON);\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":2445},"end":{"line":29,"column":4,"offset":3265}}}],"position":{"start":{"line":14,"column":1,"offset":2445},"end":{"line":29,"column":4,"offset":3265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Slack complains if there is no return message, so I've also included just a simple \"send complete\" at the end of the ","position":{"start":{"line":31,"column":1,"offset":3267},"end":{"line":31,"column":118,"offset":3384}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"doPost()"}],"position":{"start":{"line":31,"column":118,"offset":3384},"end":{"line":31,"column":128,"offset":3394}}},{"type":"text","value":" function. Now, all you need to do is create the functions to handle each of the if statements in ","position":{"start":{"line":31,"column":128,"offset":3394},"end":{"line":31,"column":226,"offset":3492}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"doPost()"}],"position":{"start":{"line":31,"column":226,"offset":3492},"end":{"line":31,"column":236,"offset":3502}}},{"type":"text","value":". An example of this function can be seen here, for marking a delivery as received. Notice that regular expressions are used to determine the format for the string that is attached to the slash command.","position":{"start":{"line":31,"column":236,"offset":3502},"end":{"line":31,"column":438,"offset":3704}}}],"position":{"start":{"line":31,"column":1,"offset":3267},"end":{"line":31,"column":438,"offset":3704}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"function received(e){\n  var receiver = e.parameter[\"user_name\"];\n  var messageReceived = e.parameter[\"text\"].trim();\n  var regex = /received ([a-zA-Z0-9-_\\s]+)/;\n  var matches = regex.exec(messageReceived);\n  var deliveryName = matches[1];\n  var sheet = getStatusSheet();\n  var affectedRow = getDeliveryRow(deliveryName);\n  \n  if (affectedRow) {\n    sheet.getRange(\"D\" + (affectedRow)).setValue('Y');\n    getLogger().log(\"%s received delivery %s\", receiver, deliveryName);\n    listDeliveries();\n  } else {\n    sendMessage(\"*\" + deliveryName + \"* delivery not found\");\n  }\n}\n"}],"position":{"start":{"line":33,"column":1,"offset":3706},"end":{"line":51,"column":4,"offset":4298}}}],"position":{"start":{"line":33,"column":1,"offset":3706},"end":{"line":51,"column":4,"offset":4298}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then there's the timed triggers. To do this, I used a trigger function, which runs another function I made, querySpreadsheet, once every day. I also created a button on a html page to turn on/off this trigger.","position":{"start":{"line":53,"column":1,"offset":4300},"end":{"line":53,"column":210,"offset":4509}}}],"position":{"start":{"line":53,"column":1,"offset":4300},"end":{"line":53,"column":210,"offset":4509}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"function createTrigger() {\n  ScriptApp.newTrigger('querySpreadsheet')\n  .timeBased()\n  .everyDays(1)\n  .create()\n}\n"}],"position":{"start":{"line":54,"column":1,"offset":4510},"end":{"line":61,"column":4,"offset":4643}}}],"position":{"start":{"line":54,"column":1,"offset":4510},"end":{"line":61,"column":4,"offset":4643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another note, I used BetterLog to create another spreadsheet tab that keeps track of the different actions users take with the app. This helps us know who received what package in case we need to track one down. You'll have to add the BetterLog library to your project.","position":{"start":{"line":63,"column":1,"offset":4645},"end":{"line":63,"column":270,"offset":4914}}}],"position":{"start":{"line":63,"column":1,"offset":4645},"end":{"line":63,"column":270,"offset":4914}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To set everything up on the Slack end, login to ","position":{"start":{"line":65,"column":1,"offset":4916},"end":{"line":65,"column":49,"offset":4964}}},{"type":"raw","value":"<a href=\"https://api.slack.com/apps\">","position":{"start":{"line":65,"column":49,"offset":4964},"end":{"line":65,"column":86,"offset":5001}}},{"type":"text","value":"api.slack.com/apps","position":{"start":{"line":65,"column":86,"offset":5001},"end":{"line":65,"column":104,"offset":5019}}},{"type":"raw","value":"</a>","position":{"start":{"line":65,"column":104,"offset":5019},"end":{"line":65,"column":108,"offset":5023}}},{"type":"text","value":", create a new app, and Add features and functionality, adding Incoming Webhooks, Interactive Components, and Slash Commands. You will need to copy the incoming webhooks link into the Google Apps Script. ","position":{"start":{"line":65,"column":108,"offset":5023},"end":{"line":65,"column":312,"offset":5227}}}],"position":{"start":{"line":65,"column":1,"offset":4916},"end":{"line":65,"column":312,"offset":5227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The full script is located in this github repository: ","position":{"start":{"line":67,"column":1,"offset":5229},"end":{"line":67,"column":55,"offset":5283}}},{"type":"raw","value":"<a href=\"https://github.com/simjxu/google_apps_scripts/tree/master/Slack-Delivery-Tracking\">","position":{"start":{"line":67,"column":55,"offset":5283},"end":{"line":67,"column":147,"offset":5375}}},{"type":"text","value":"Slack Delivery Tracking","position":{"start":{"line":67,"column":147,"offset":5375},"end":{"line":67,"column":170,"offset":5398}}},{"type":"raw","value":"</a>","position":{"start":{"line":67,"column":170,"offset":5398},"end":{"line":67,"column":174,"offset":5402}}},{"type":"text","value":"  Be sure to change out the spreadsheet id to match the spreadsheet id of your Google sheets document (the long string in your Google Sheet URL), and change the incoming webhook link to the webhook link that you receive when you enable that feature on your slack apps. You might want to test by changing the ","position":{"start":{"line":67,"column":174,"offset":5402},"end":{"line":67,"column":482,"offset":5710}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"createTrigger()"}],"position":{"start":{"line":67,"column":482,"offset":5710},"end":{"line":67,"column":499,"offset":5727}}},{"type":"text","value":" function to be ","position":{"start":{"line":67,"column":499,"offset":5727},"end":{"line":67,"column":515,"offset":5743}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":".everyMinutes(1)"}],"position":{"start":{"line":67,"column":515,"offset":5743},"end":{"line":67,"column":533,"offset":5761}}},{"type":"text","value":" instead of ","position":{"start":{"line":67,"column":533,"offset":5761},"end":{"line":67,"column":545,"offset":5773}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":".everyDays(1)"}],"position":{"start":{"line":67,"column":545,"offset":5773},"end":{"line":67,"column":560,"offset":5788}}},{"type":"text","value":".","position":{"start":{"line":67,"column":560,"offset":5788},"end":{"line":67,"column":561,"offset":5789}}}],"position":{"start":{"line":67,"column":1,"offset":5229},"end":{"line":67,"column":561,"offset":5789}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To Do: to reduce time that it takes to read through the excel sheet, it's best to add within the trigger function something that places the received packages into some sort of archive spreadsheet tab. But alas, I already took too long to create this post. I can't take this long if I want to see rows of green squares on my github.","position":{"start":{"line":69,"column":1,"offset":5791},"end":{"line":69,"column":332,"offset":6122}}}],"position":{"start":{"line":69,"column":1,"offset":5791},"end":{"line":69,"column":332,"offset":6122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Useful references: ","position":{"start":{"line":71,"column":1,"offset":6124},"end":{"line":71,"column":20,"offset":6143}}},{"type":"element","tagName":"a","properties":{"href":"https://medium.com/@hopsor/building-a-slack-serverless-bot-with-google-apps-script-and-spreadsheets-35bdac755a44"},"children":[{"type":"text","value":"https://medium.com/@hopsor/building-a-slack-serverless-bot-with-google-apps-script-and-spreadsheets-35bdac755a44","position":{"start":{"line":71,"column":20,"offset":6143},"end":{"line":71,"column":132,"offset":6255}}}],"position":{"start":{"line":71,"column":20,"offset":6143},"end":{"line":71,"column":132,"offset":6255}}}],"position":{"start":{"line":71,"column":1,"offset":6124},"end":{"line":71,"column":132,"offset":6255}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":1,"offset":6256}}},"transformer-remark-markdown-html-e1a1ac9a4f71834373d7d2be84b0aca1--":"<p>Since I work for an IIoT combined hardware/sofware company, we often receive packages through the mail. This includes anything from dev boards to etched plastic enclosures. Now that we receive packages so often, it is not very easy to keep track of when a package is supposed to be arriving, and we don't always get notifications when items get held up in customs or get lost in the process. Once again APIs are here to save the day.</p>\n<p>In the ideal scenario, we could create a Chrome extension with a trained machine learning algorithm that can detect whether a purchase has been made for a delivery, guess the delivery timeframe, store the delivery in a database, and automatically alert the user if today's date is later than the anticipated delivery date. However, even this scenario doesn't account for company purchases made with a purchase order system, which is why procurement teams exist.</p>\n<p>Given that I am no genius, an idiot's backup to the system above is to use a slack slash command to automatically update a simple database, like a spreadsheet in Google Sheets for example. Then, using an incoming webhook, send an alert if it is past the delivery date for the package, triggered once every day to a channel, perhaps called #deliveryalerts. If there are no packages that are supposed to be delivered already, no alerts. </p>\n<p>We can first create a simple spreadsheet database like this:\n<img src=\"https://raw.githubusercontent.com/simjxu/simjxu.github.io/master/img/vendor_spreadsheet.jpg\" alt=\"vendor-spreadsheet\">\nThis would show the item that is being delivered, the estimated delivery date, and a boolean Yes/No as to whether the item has been received.</p>\n<p>Then, we can create the #deliveryalerts channel in Slack, and integrate a Slack incoming webhook that points to #deliveryalerts and a slash command. In this case, we create one called /delivery. /delivery will send a post request to some endpoint that you need to define (a url). In our case, we can just use Google Apps script to set up this endpoint. Anything written after the /delivery command will be sent to the endpoint, and we can create the script to parse this text message using regular expressions (regex). Google Apps Script will handle the request through a doPost() function that you must write. Just take the spreadsheet that you want to set as your deliveries database, and on the Tools menu select script editor. Copy the <code>doPost()</code> example below into the Code.gs file.</p>\n<pre><code class=\"language-javascript\">// Handle the Post request, based upon the command that is written after the slash command\nfunction doPost(e){\n  var commandReceived = e.parameter[\"text\"];\n\n  if (commandReceived.match(/help/)) showHelp();            // showHelp() is run when slack user types: /delivery help\n  if (commandReceived.match(/list/)) listDeliveries();\n  if (commandReceived.match(/add/)) add(e);\n  if (commandReceived.match(/remove/)) remove(e);           // remove(e) is run after slack user types: /delivery remove someItem\n  if (commandReceived.match(/received/)) received(e);\n  \n  // Need to create a return, otherwise slack will complain that there was no response created\n  var returnMessage = \"send complete\";\n  return ContentService.createTextOutput(JSON.stringify({text:returnMessage})).setMimeType(ContentService.MimeType.JSON);\n}\n</code></pre>\n<p>Slack complains if there is no return message, so I've also included just a simple \"send complete\" at the end of the <code>doPost()</code> function. Now, all you need to do is create the functions to handle each of the if statements in <code>doPost()</code>. An example of this function can be seen here, for marking a delivery as received. Notice that regular expressions are used to determine the format for the string that is attached to the slash command.</p>\n<pre><code class=\"language-javascript\">function received(e){\n  var receiver = e.parameter[\"user_name\"];\n  var messageReceived = e.parameter[\"text\"].trim();\n  var regex = /received ([a-zA-Z0-9-_\\s]+)/;\n  var matches = regex.exec(messageReceived);\n  var deliveryName = matches[1];\n  var sheet = getStatusSheet();\n  var affectedRow = getDeliveryRow(deliveryName);\n  \n  if (affectedRow) {\n    sheet.getRange(\"D\" + (affectedRow)).setValue('Y');\n    getLogger().log(\"%s received delivery %s\", receiver, deliveryName);\n    listDeliveries();\n  } else {\n    sendMessage(\"*\" + deliveryName + \"* delivery not found\");\n  }\n}\n</code></pre>\n<p>Then there's the timed triggers. To do this, I used a trigger function, which runs another function I made, querySpreadsheet, once every day. I also created a button on a html page to turn on/off this trigger.</p>\n<pre><code class=\"language-javascript\">function createTrigger() {\n  ScriptApp.newTrigger('querySpreadsheet')\n  .timeBased()\n  .everyDays(1)\n  .create()\n}\n</code></pre>\n<p>Another note, I used BetterLog to create another spreadsheet tab that keeps track of the different actions users take with the app. This helps us know who received what package in case we need to track one down. You'll have to add the BetterLog library to your project.</p>\n<p>To set everything up on the Slack end, login to <a href=\"https://api.slack.com/apps\">api.slack.com/apps</a>, create a new app, and Add features and functionality, adding Incoming Webhooks, Interactive Components, and Slash Commands. You will need to copy the incoming webhooks link into the Google Apps Script. </p>\n<p>The full script is located in this github repository: <a href=\"https://github.com/simjxu/google_apps_scripts/tree/master/Slack-Delivery-Tracking\">Slack Delivery Tracking</a>  Be sure to change out the spreadsheet id to match the spreadsheet id of your Google sheets document (the long string in your Google Sheet URL), and change the incoming webhook link to the webhook link that you receive when you enable that feature on your slack apps. You might want to test by changing the <code>createTrigger()</code> function to be <code>.everyMinutes(1)</code> instead of <code>.everyDays(1)</code>.</p>\n<p>To Do: to reduce time that it takes to read through the excel sheet, it's best to add within the trigger function something that places the received packages into some sort of archive spreadsheet tab. But alas, I already took too long to create this post. I can't take this long if I want to see rows of green squares on my github.</p>\n<p>Useful references: <a href=\"https://medium.com/@hopsor/building-a-slack-serverless-bot-with-google-apps-script-and-spreadsheets-35bdac755a44\">https://medium.com/@hopsor/building-a-slack-serverless-bot-with-google-apps-script-and-spreadsheets-35bdac755a44</a></p>"}